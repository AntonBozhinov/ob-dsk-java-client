/*
 * AIS API
 * Account Information Service Provider API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apigate@dskbank.bg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.ConsentStatus;
import java.io.IOException;

/**
 * InlineResponse2006
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-27T12:18:16.648Z")
public class InlineResponse2006 {
  @SerializedName("consentStatus")
  private ConsentStatus consentStatus = null;

  /**
   * Gets or Sets scaStatus
   */
  @JsonAdapter(ScaStatusEnum.Adapter.class)
  public enum ScaStatusEnum {
    FINALISED("finalised");

    private String value;

    ScaStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaStatusEnum fromValue(String text) {
      for (ScaStatusEnum b : ScaStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScaStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScaStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scaStatus")
  private ScaStatusEnum scaStatus = null;

  public InlineResponse2006 consentStatus(ConsentStatus consentStatus) {
    this.consentStatus = consentStatus;
    return this;
  }

   /**
   * Get consentStatus
   * @return consentStatus
  **/
  @ApiModelProperty(required = true, value = "")
  public ConsentStatus getConsentStatus() {
    return consentStatus;
  }

  public void setConsentStatus(ConsentStatus consentStatus) {
    this.consentStatus = consentStatus;
  }

  public InlineResponse2006 scaStatus(ScaStatusEnum scaStatus) {
    this.scaStatus = scaStatus;
    return this;
  }

   /**
   * Get scaStatus
   * @return scaStatus
  **/
  @ApiModelProperty(value = "")
  public ScaStatusEnum getScaStatus() {
    return scaStatus;
  }

  public void setScaStatus(ScaStatusEnum scaStatus) {
    this.scaStatus = scaStatus;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2006 inlineResponse2006 = (InlineResponse2006) o;
    return Objects.equals(this.consentStatus, inlineResponse2006.consentStatus) &&
        Objects.equals(this.scaStatus, inlineResponse2006.scaStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consentStatus, scaStatus);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2006 {\n");
    
    sb.append("    consentStatus: ").append(toIndentedString(consentStatus)).append("\n");
    sb.append("    scaStatus: ").append(toIndentedString(scaStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

