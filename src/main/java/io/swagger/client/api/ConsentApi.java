/*
 * AIS API
 * Account Information Service Provider API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apigate@dskbank.bg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ConsentRequestBody;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse201;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConsentApi {
    private ApiClient apiClient;

    public ConsentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConsentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteConsentWithID
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteConsentWithIDCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consents/{consent-id}"
            .replaceAll("\\{" + "consent-id" + "\\}", apiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteConsentWithIDValidateBeforeCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling deleteConsentWithID(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling deleteConsentWithID(Async)");
        }
        

        com.squareup.okhttp.Call call = deleteConsentWithIDCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete consent
     * The TPP can delete an account information consent object if needed.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteConsentWithID(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        deleteConsentWithIDWithHttpInfo(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
    }

    /**
     * Delete consent
     * The TPP can delete an account information consent object if needed.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteConsentWithIDWithHttpInfo(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = deleteConsentWithIDValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete consent (asynchronously)
     * The TPP can delete an account information consent object if needed.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteConsentWithIDAsync(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteConsentWithIDValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllConsets
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAllConsetsCall(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllConsetsValidateBeforeCall(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getAllConsets(Async)");
        }
        

        com.squareup.okhttp.Call call = getAllConsetsCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Consent
     * Return valid Consent Id for PSU-TPP consent.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2004
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2004 getAllConsets(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2004> resp = getAllConsetsWithHttpInfo(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Get Consent
     * Return valid Consent Id for PSU-TPP consent.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2004&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2004> getAllConsetsWithHttpInfo(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getAllConsetsValidateBeforeCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Consent (asynchronously)
     * Return valid Consent Id for PSU-TPP consent.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllConsetsAsync(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2004> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllConsetsValidateBeforeCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2004>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsent
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsentCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consents/{consent-id}"
            .replaceAll("\\{" + "consent-id" + "\\}", apiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsentValidateBeforeCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsent(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getConsent(Async)");
        }
        

        com.squareup.okhttp.Call call = getConsentCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Consent Request
     * Reads the exact definition of the given consent resource {consent-id}
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2005
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2005 getConsent(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2005> resp = getConsentWithHttpInfo(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Get Consent Request
     * Reads the exact definition of the given consent resource {consent-id}
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2005&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2005> getConsentWithHttpInfo(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getConsentValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Consent Request (asynchronously)
     * Reads the exact definition of the given consent resource {consent-id}
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsentAsync(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2005> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsentValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2005>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getConsentStatus
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getConsentStatusCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/consents/{consent-id}/status"
            .replaceAll("\\{" + "consent-id" + "\\}", apiClient.escapeString(consentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getConsentStatusValidateBeforeCall(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'consentId' is set
        if (consentId == null) {
            throw new ApiException("Missing the required parameter 'consentId' when calling getConsentStatus(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getConsentStatus(Async)");
        }
        

        com.squareup.okhttp.Call call = getConsentStatusCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Consent status request
     * Reads the transaction status of the addressed consent resource.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2006
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2006 getConsentStatus(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2006> resp = getConsentStatusWithHttpInfo(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Consent status request
     * Reads the transaction status of the addressed consent resource.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2006&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2006> getConsentStatusWithHttpInfo(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getConsentStatusValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Consent status request (asynchronously)
     * Reads the transaction status of the addressed consent resource.
     * @param consentId ID of the corresponding consent object as returned by an Account Information Consent Request (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getConsentStatusAsync(String consentId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2006> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getConsentStatusValidateBeforeCall(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2006>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for postConsent
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect (required)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (required)
     * @param body  (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call postConsentCall(UUID xRequestID, String tpPRedirectURI, String psUIPAddress, ConsentRequestBody body, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/consents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (tpPRedirectURI != null)
        localVarHeaderParams.put("TPP-Redirect-URI", apiClient.parameterToString(tpPRedirectURI));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call postConsentValidateBeforeCall(UUID xRequestID, String tpPRedirectURI, String psUIPAddress, ConsentRequestBody body, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling postConsent(Async)");
        }
        
        // verify the required parameter 'tpPRedirectURI' is set
        if (tpPRedirectURI == null) {
            throw new ApiException("Missing the required parameter 'tpPRedirectURI' when calling postConsent(Async)");
        }
        
        // verify the required parameter 'psUIPAddress' is set
        if (psUIPAddress == null) {
            throw new ApiException("Missing the required parameter 'psUIPAddress' when calling postConsent(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postConsent(Async)");
        }
        

        com.squareup.okhttp.Call call = postConsentCall(xRequestID, tpPRedirectURI, psUIPAddress, body, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create consent
     * This method create a consent resource, defining access rights to dedicated accounts of a given PSU. Only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and BDSK.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect (required)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (required)
     * @param body  (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @return InlineResponse201
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse201 postConsent(UUID xRequestID, String tpPRedirectURI, String psUIPAddress, ConsentRequestBody body, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID) throws ApiException {
        ApiResponse<InlineResponse201> resp = postConsentWithHttpInfo(xRequestID, tpPRedirectURI, psUIPAddress, body, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID);
        return resp.getData();
    }

    /**
     * Create consent
     * This method create a consent resource, defining access rights to dedicated accounts of a given PSU. Only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and BDSK.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect (required)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (required)
     * @param body  (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @return ApiResponse&lt;InlineResponse201&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse201> postConsentWithHttpInfo(UUID xRequestID, String tpPRedirectURI, String psUIPAddress, ConsentRequestBody body, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID) throws ApiException {
        com.squareup.okhttp.Call call = postConsentValidateBeforeCall(xRequestID, tpPRedirectURI, psUIPAddress, body, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create consent (asynchronously)
     * This method create a consent resource, defining access rights to dedicated accounts of a given PSU. Only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and BDSK.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param tpPRedirectURI URI of the TPP, where the transaction flow shall be redirected to after a Redirect (required)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (required)
     * @param body  (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call postConsentAsync(UUID xRequestID, String tpPRedirectURI, String psUIPAddress, ConsentRequestBody body, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, final ApiCallback<InlineResponse201> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = postConsentValidateBeforeCall(xRequestID, tpPRedirectURI, psUIPAddress, body, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse201>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
