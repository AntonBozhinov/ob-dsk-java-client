/*
 * AIS API
 * Account Information Service Provider API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apigate@dskbank.bg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountApi {
    private ApiClient apiClient;

    public AccountApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountByAccountId
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountByAccountIdCall(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account-id}"
            .replaceAll("\\{" + "account-id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountByAccountIdValidateBeforeCall(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountByAccountId(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getAccountByAccountId(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountByAccountIdCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read Account Details
     * Reads details about the addressed account. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed details of this account depends then on the stored consent addressed by the OAuth2 access token.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2001
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2001 getAccountByAccountId(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2001> resp = getAccountByAccountIdWithHttpInfo(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Read Account Details
     * Reads details about the addressed account. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed details of this account depends then on the stored consent addressed by the OAuth2 access token.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2001> getAccountByAccountIdWithHttpInfo(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getAccountByAccountIdValidateBeforeCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Account Details (asynchronously)
     * Reads details about the addressed account. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed details of this account depends then on the stored consent addressed by the OAuth2 access token.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountByAccountIdAsync(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2001> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountByAccountIdValidateBeforeCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2001>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getAccounts
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAccountsCall(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAccountsValidateBeforeCall(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getAccounts(Async)");
        }
        

        com.squareup.okhttp.Call call = getAccountsCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read account list
     * Read the list of all accessible accounts relative to a granted consent. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed list of accounts depends then on the PSU ID and OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 getAccounts(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse200> resp = getAccountsWithHttpInfo(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Read account list
     * Read the list of all accessible accounts relative to a granted consent. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed list of accounts depends then on the PSU ID and OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> getAccountsWithHttpInfo(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read account list (asynchronously)
     * Read the list of all accessible accounts relative to a granted consent. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed list of accounts depends then on the PSU ID and OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAccountsAsync(UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAccountsValidateBeforeCall(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBalanceForAccountByAccountId
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getBalanceForAccountByAccountIdCall(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account-id}/balances"
            .replaceAll("\\{" + "account-id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getBalanceForAccountByAccountIdValidateBeforeCall(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBalanceForAccountByAccountId(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getBalanceForAccountByAccountId(Async)");
        }
        

        com.squareup.okhttp.Call call = getBalanceForAccountByAccountIdCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read Balance
     * Reads the balance list for a given account addressed by \&quot;account-id\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2002
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2002 getBalanceForAccountByAccountId(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2002> resp = getBalanceForAccountByAccountIdWithHttpInfo(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Read Balance
     * Reads the balance list for a given account addressed by \&quot;account-id\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2002> getBalanceForAccountByAccountIdWithHttpInfo(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getBalanceForAccountByAccountIdValidateBeforeCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Balance (asynchronously)
     * Reads the balance list for a given account addressed by \&quot;account-id\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getBalanceForAccountByAccountIdAsync(String accountId, UUID xRequestID, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2002> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getBalanceForAccountByAccountIdValidateBeforeCall(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2002>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTransactionsForAccountByAccountId
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param dateFrom Starting date (inclusive the date dateFrom) of the transaction list. (required)
     * @param bookingStatus Permitted codes are “booked”, “pending” and “both” (required)
     * @param dateTo End date (inclusive the data dateTo) of the transaction list, default is now if not given. (optional)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForAccountByAccountIdCall(String accountId, UUID xRequestID, String dateFrom, String bookingStatus, String dateTo, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account-id}/transactions"
            .replaceAll("\\{" + "account-id" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (dateFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateFrom", dateFrom));
        if (dateTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dateTo", dateTo));
        if (bookingStatus != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bookingStatus", bookingStatus));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xRequestID != null)
        localVarHeaderParams.put("X-Request-ID", apiClient.parameterToString(xRequestID));
        if (psUUserAgent != null)
        localVarHeaderParams.put("PSU-User-Agent", apiClient.parameterToString(psUUserAgent));
        if (psUIPPort != null)
        localVarHeaderParams.put("PSU-IP-Port", apiClient.parameterToString(psUIPPort));
        if (psUGeoLocation != null)
        localVarHeaderParams.put("PSU-Geo-Location", apiClient.parameterToString(psUGeoLocation));
        if (psUAccept != null)
        localVarHeaderParams.put("PSU-Accept", apiClient.parameterToString(psUAccept));
        if (psUAcceptCharset != null)
        localVarHeaderParams.put("PSU-Accept-Charset", apiClient.parameterToString(psUAcceptCharset));
        if (psUAcceptEncoding != null)
        localVarHeaderParams.put("PSU-Accept-Encoding", apiClient.parameterToString(psUAcceptEncoding));
        if (psUAcceptLanguage != null)
        localVarHeaderParams.put("PSU-Accept-Language", apiClient.parameterToString(psUAcceptLanguage));
        if (psUHttpMethod != null)
        localVarHeaderParams.put("PSU-Http-Method", apiClient.parameterToString(psUHttpMethod));
        if (psUDeviceID != null)
        localVarHeaderParams.put("PSU-Device-ID", apiClient.parameterToString(psUDeviceID));
        if (psUIPAddress != null)
        localVarHeaderParams.put("PSU-IP-Address", apiClient.parameterToString(psUIPAddress));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "OAuth2", "api-key-1" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getTransactionsForAccountByAccountIdValidateBeforeCall(String accountId, UUID xRequestID, String dateFrom, String bookingStatus, String dateTo, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getTransactionsForAccountByAccountId(Async)");
        }
        
        // verify the required parameter 'xRequestID' is set
        if (xRequestID == null) {
            throw new ApiException("Missing the required parameter 'xRequestID' when calling getTransactionsForAccountByAccountId(Async)");
        }
        
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getTransactionsForAccountByAccountId(Async)");
        }
        
        // verify the required parameter 'bookingStatus' is set
        if (bookingStatus == null) {
            throw new ApiException("Missing the required parameter 'bookingStatus' when calling getTransactionsForAccountByAccountId(Async)");
        }
        

        com.squareup.okhttp.Call call = getTransactionsForAccountByAccountIdCall(accountId, xRequestID, dateFrom, bookingStatus, dateTo, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Read Transaction List
     * Read transaction lists of a given account аddressed by \&quot;account-id\&quot;, depending on the steering parameter \&quot;bookingStatus\&quot; and the attributes \&quot;dateFrom\&quot; and \&quot;dateTo\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param dateFrom Starting date (inclusive the date dateFrom) of the transaction list. (required)
     * @param bookingStatus Permitted codes are “booked”, “pending” and “both” (required)
     * @param dateTo End date (inclusive the data dateTo) of the transaction list, default is now if not given. (optional)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return InlineResponse2003
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse2003 getTransactionsForAccountByAccountId(String accountId, UUID xRequestID, String dateFrom, String bookingStatus, String dateTo, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        ApiResponse<InlineResponse2003> resp = getTransactionsForAccountByAccountIdWithHttpInfo(accountId, xRequestID, dateFrom, bookingStatus, dateTo, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);
        return resp.getData();
    }

    /**
     * Read Transaction List
     * Read transaction lists of a given account аddressed by \&quot;account-id\&quot;, depending on the steering parameter \&quot;bookingStatus\&quot; and the attributes \&quot;dateFrom\&quot; and \&quot;dateTo\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param dateFrom Starting date (inclusive the date dateFrom) of the transaction list. (required)
     * @param bookingStatus Permitted codes are “booked”, “pending” and “both” (required)
     * @param dateTo End date (inclusive the data dateTo) of the transaction list, default is now if not given. (optional)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @return ApiResponse&lt;InlineResponse2003&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse2003> getTransactionsForAccountByAccountIdWithHttpInfo(String accountId, UUID xRequestID, String dateFrom, String bookingStatus, String dateTo, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress) throws ApiException {
        com.squareup.okhttp.Call call = getTransactionsForAccountByAccountIdValidateBeforeCall(accountId, xRequestID, dateFrom, bookingStatus, dateTo, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read Transaction List (asynchronously)
     * Read transaction lists of a given account аddressed by \&quot;account-id\&quot;, depending on the steering parameter \&quot;bookingStatus\&quot; and the attributes \&quot;dateFrom\&quot; and \&quot;dateTo\&quot;.
     * @param accountId The account-id is retrieved by using a \&quot;Read Account List\&quot; call. The account-id is the \&quot;resourceId\&quot; attribute of the account structure. Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param xRequestID ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param dateFrom Starting date (inclusive the date dateFrom) of the transaction list. (required)
     * @param bookingStatus Permitted codes are “booked”, “pending” and “both” (required)
     * @param dateTo End date (inclusive the data dateTo) of the transaction list, default is now if not given. (optional)
     * @param psUUserAgent The forwarded Agent header field of the http request between PSU and TPP, if available. (optional)
     * @param psUIPPort The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP, if available. (optional)
     * @param psUGeoLocation The forwarded Geo Location header field of the corresponding http request between PSU and TPP if available. (optional)
     * @param psUAccept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param psUAcceptCharset  (optional)
     * @param psUAcceptEncoding  (optional)
     * @param psUAcceptLanguage  (optional)
     * @param psUHttpMethod HTTP method used at the PSU – TPP interface, if available. Valid values are\\: * GET * POST * PUT * PATCH * DELETE  (optional)
     * @param psUDeviceID UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. (optional)
     * @param psUIPAddress The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTransactionsForAccountByAccountIdAsync(String accountId, UUID xRequestID, String dateFrom, String bookingStatus, String dateTo, String psUUserAgent, String psUIPPort, String psUGeoLocation, String psUAccept, String psUAcceptCharset, String psUAcceptEncoding, String psUAcceptLanguage, String psUHttpMethod, String psUDeviceID, String psUIPAddress, final ApiCallback<InlineResponse2003> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTransactionsForAccountByAccountIdValidateBeforeCall(accountId, xRequestID, dateFrom, bookingStatus, dateTo, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2003>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
