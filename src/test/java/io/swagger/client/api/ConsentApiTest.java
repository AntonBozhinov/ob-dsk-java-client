/*
 * AIS API
 * Account Information Service Provider API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apigate@dskbank.bg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ConsentRequestBody;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse2004;
import io.swagger.client.model.InlineResponse2005;
import io.swagger.client.model.InlineResponse2006;
import io.swagger.client.model.InlineResponse201;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConsentApi
 */
@Ignore
public class ConsentApiTest {

    private final ConsentApi api = new ConsentApi();

    
    /**
     * Delete consent
     *
     * The TPP can delete an account information consent object if needed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteConsentWithIDTest() throws ApiException {
        String consentId = null;
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        api.deleteConsentWithID(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Get Consent
     *
     * Return valid Consent Id for PSU-TPP consent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllConsetsTest() throws ApiException {
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2004 response = api.getAllConsets(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Get Consent Request
     *
     * Reads the exact definition of the given consent resource {consent-id}
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentTest() throws ApiException {
        String consentId = null;
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2005 response = api.getConsent(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Consent status request
     *
     * Reads the transaction status of the addressed consent resource.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getConsentStatusTest() throws ApiException {
        String consentId = null;
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2006 response = api.getConsentStatus(consentId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Create consent
     *
     * This method create a consent resource, defining access rights to dedicated accounts of a given PSU. Only access rights are inserted without mentioning the addressed account. The relation to accounts is then handled afterwards between PSU and BDSK.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postConsentTest() throws ApiException {
        UUID xRequestID = null;
        String tpPRedirectURI = null;
        String psUIPAddress = null;
        ConsentRequestBody body = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        InlineResponse201 response = api.postConsent(xRequestID, tpPRedirectURI, psUIPAddress, body, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID);

        // TODO: test validations
    }
    
}
