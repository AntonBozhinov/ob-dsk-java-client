/*
 * AIS API
 * Account Information Service Provider API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apigate@dskbank.bg
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.InlineResponse200;
import io.swagger.client.model.InlineResponse2001;
import io.swagger.client.model.InlineResponse2002;
import io.swagger.client.model.InlineResponse2003;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Ignore
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    
    /**
     * Read Account Details
     *
     * Reads details about the addressed account. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed details of this account depends then on the stored consent addressed by the OAuth2 access token.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountByAccountIdTest() throws ApiException {
        String accountId = null;
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2001 response = api.getAccountByAccountId(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Read account list
     *
     * Read the list of all accessible accounts relative to a granted consent. It is assumed that a consent of the PSU to this access is already given and stored on the BDSK system. The addressed list of accounts depends then on the PSU ID and OAuth2 access token. Returns all identifiers of the accounts, to which an account access has been granted to through the /consents endpoint by the PSU. In addition, relevant information about the accounts and hyperlinks to corresponding account information resources are provided if a related consent has been already granted.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountsTest() throws ApiException {
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse200 response = api.getAccounts(xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Read Balance
     *
     * Reads the balance list for a given account addressed by \&quot;account-id\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBalanceForAccountByAccountIdTest() throws ApiException {
        String accountId = null;
        UUID xRequestID = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2002 response = api.getBalanceForAccountByAccountId(accountId, xRequestID, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
    /**
     * Read Transaction List
     *
     * Read transaction lists of a given account Ð°ddressed by \&quot;account-id\&quot;, depending on the steering parameter \&quot;bookingStatus\&quot; and the attributes \&quot;dateFrom\&quot; and \&quot;dateTo\&quot;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionsForAccountByAccountIdTest() throws ApiException {
        String accountId = null;
        UUID xRequestID = null;
        String dateFrom = null;
        String bookingStatus = null;
        String dateTo = null;
        String psUUserAgent = null;
        String psUIPPort = null;
        String psUGeoLocation = null;
        String psUAccept = null;
        String psUAcceptCharset = null;
        String psUAcceptEncoding = null;
        String psUAcceptLanguage = null;
        String psUHttpMethod = null;
        String psUDeviceID = null;
        String psUIPAddress = null;
        InlineResponse2003 response = api.getTransactionsForAccountByAccountId(accountId, xRequestID, dateFrom, bookingStatus, dateTo, psUUserAgent, psUIPPort, psUGeoLocation, psUAccept, psUAcceptCharset, psUAcceptEncoding, psUAcceptLanguage, psUHttpMethod, psUDeviceID, psUIPAddress);

        // TODO: test validations
    }
    
}
